$localAdminName = "LocalAdmin"
$FullName = "Local Administrator"
$UserDescription = "Local administrator generated by RMM"
$adminGroup = $global:adminGroup


# Check if the account exists
Write-Output "Checking if account exists"
$username = $localAdminName
$user = Get-LocalUser -Name $username -ErrorAction SilentlyContinue
# If not, create an account
if (!$user) {
    Try {
        $user = New-LocalUser -Name $username -NoPassword -FullName $FullName -Description $UserDescription
    }
    Catch {
        Write-Output "Unable to create user: $username"
        Write-Output $PSItem
        Exit 21
    }
}

Write-Output "Checking if account is part of local admins"
# Check if an account is part of local admins
$adminGroup = Get-LocalGroup -Name $adminGroup
if (!$adminGroup) {
    Write-Error "The 'Administrators' group object is null."
    Exit 22
}
$members = (Get-LocalGroupMember -Group $adminGroup)
If (!$members) {
    Write-Error "No admin group members"
    Exit 23
}

$admin = $false
foreach ($adminUser in ($members | Where-Object PrincipalSource -EQ "Local")) {
    If ($adminUser.Name -like "*\$localAdminName") {$admin = $true}
}

# If not, add to the local admins group
if (!$admin) {
    $user = Get-LocalUser -Name $localAdminName
    Write-Output "Adding user to local admins"
    if (!$user) {
        Write-Error "The '$localAdminName' user object is not found."
        return
    }
    $userPrincipal = $user.SID
    if (!$userPrincipal) {
        Write-Error "The '$localAdminName' user principal is null."
        return
    }
    Try {
        Add-LocalGroupMember -Group $adminGroup -Member $localAdminName
    }
    Catch {
        Write-Error "Unable to add user to admins group"
        Write-Output $PSItem
        Exit 24
    }
}

Write-Output "Setting password"
try {
    # Generate a random password
    $password = -join (33..126 | Get-Random -Count 16 | ForEach-Object { [char]$_ })
    
    $SetResult = (Ninja-Property-Set LocalAdminPassword $password)
    If ($SetResult) {
        Write-Error "Failed to send password to Ninja"
        Write-Error $SetResult
        Exit 25
    }
      

    # Set the account password to a random password
    $user | Set-LocalUser -Password (ConvertTo-SecureString $password -AsPlainText -Force)
}
catch {
    if ($_) {
        Write-Error "Error setting user password: $_"
    }
    return
}